/* Test SCSS for the Hanwa globe */

$dot_number: 10;
$radius: 300; //math.pi * (3 - math.sqrt(5))

.wrap {
  position: relative;
  top: 50%;
  left: 50%;
  width: 0;
  height: 0;
  transform-style: preserve-3d;
  perspective: 1000px;
  animation: rotate 14s infinite linear;
}

@keyframes rotate {
  100% {
    transform: rotateY(360deg) rotateX(360deg);
  }
}
.c {
  position: absolute;
  width: 2px;
  height: 2px;
  border-radius: 50%;
  opacity: 0;
}
$pi: 3.14159265359;
$_precision: 10;

@function pow($base, $exp) {
  $value: $base;
  @if $exp > 1 {
    @for $i from 2 through $exp {
      $value: $value * $base;
    }
  }
  @if $exp < 1{
    @for $i from 0 through -$exp {
      $value: $value / $base;
    }
  }
  @return $value;
}

@function fact($num) {
  $fact: 1;
  @if $num > 0{
    @for $i from 1 through $num {
      $fact: $fact * $i;
    }
  }
  @return $fact;
}

@function _to_unitless_rad($angle) {
  @if unit($angle) == "deg" {
    $angle: $angle / 180deg * $pi;
  }
  @if unit($angle) == "rad" {
    $angle: $angle / 1rad;
  }
  @return $angle;
}

@function sin($angle){
  $a: _to_unitless_rad($angle);
  $sin: $a;
  @for $n from 1 through $_precision {
    $sin: $sin + (pow(-1, $n) / fact(2 * $n + 1) ) * pow($a, (2 * $n + 1));
  }
  @return $sin;
}

@function cos($angle){
  $a: _to_unitless_rad($angle);
  $cos: 1;
  @for $n from 1 through $_precision {
    $cos: $cos + ( pow(-1,$n) / fact(2*$n) ) * pow($a,2*$n);
  }
  @return $cos;
}

@function tan($angle){
  @return sin($angle) / cos($angle);
}



@for $i from 1 through $dot_number{
  .c:nth-child(#{$i}) {
    animation: orbit#{$i} 14s infinite;
    animation-delay: 0.01s;
    background-color: #ff0100;
  }

  @keyframes orbit#{$i} {
    20% {
      opacity: 1;
    }
    30% {
      transform: rotateZ(-257deg) rotateY(195deg) translateX($radius/3) rotateZ($radius * cos((#{$i / $dot_number} * 2 * $pi)));
    }
    80% {
      transform: rotateZ(-257deg) rotateY(195deg) translateX($radius/2) rotateZ(257deg);
      opacity: 1;
    }
    100% {
      transform: rotateZ(-257deg) rotateY(195deg) translateX($radius) rotateZ(257deg);
    }
  }
}
